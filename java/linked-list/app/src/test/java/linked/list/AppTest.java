/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linked.list;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LinkedListTest {

  @Test
  void testEmptyLinkedList() {
    LinkedList list = new LinkedList();
    assertNull(list.head);
  }

  @Test
  void testInsert() {
    LinkedList list = new LinkedList();
    list.insert(5);
    assertEquals(5, list.head.value);
  }

  @Test
  void testInsertMultipleNodes() {
    LinkedList list = new LinkedList();
    list.insert(5);
    list.insert(10);
    list.insert(15);
    assertEquals(5, list.head.value);
    assertEquals(10, list.head.next.value);
    assertEquals(15, list.head.next.next.value);
  }

  @Test
  void testIncludesValueExists() {
    LinkedList list = new LinkedList();
    list.insert(5);
    list.insert(10);
    list.insert(15);
    assertTrue(list.includes(10));
  }

  @Test
  void testIncludesValueNotExists() {
    LinkedList list = new LinkedList();
    list.insert(5);
    list.insert(10);
    list.insert(15);
    assertFalse(list.includes(20));
  }
  @Test
  void testToString() {
    LinkedList list = new LinkedList();
    list.insert(5);
    list.insert(10);
    list.insert(15);
    assertEquals("{ 5 } -> { 10 } -> { 15 } -> NULL", list.toString());
  }

  @Test
  void testAppend() {
    LinkedList list = new LinkedList();
    list.append(5);
    list.append(10);
    list.append(15);
    assertEquals(5, list.head.value);
    assertEquals(10, list.head.next.value);
    assertEquals(15, list.head.next.next.value);
  }

  @Test
  void testInsertBefore() {
    LinkedList list = new LinkedList();
    list.insert(5);
    list.insert(10);
    list.insert(15);
    list.insertBefore(10, 7);
    assertEquals(5, list.head.value);
    assertEquals(7, list.head.next.value);
    assertEquals(10, list.head.next.next.value);
  }

  @Test
  void testInsertBeforeFirstNode() {
    LinkedList list = new LinkedList();
    list.insert(5);
    list.insert(10);
    list.insert(15);
    list.insertBefore(5, 3);
    assertEquals(3, list.head.value);
    assertEquals(5, list.head.next.value);
  }

  @Test
  void testInsertAfter() {
    LinkedList list = new LinkedList();
    list.insert(5);
    list.insert(10);
    list.insert(15);
    list.insertAfter(10, 12);
    assertEquals(5, list.head.value);
    assertEquals(10, list.head.next.value);
    assertEquals(12, list.head.next.next.value);
    assertEquals(15, list.head.next.next.next.value);
  }

  @Test
  void testInsertAfterLastNode() {
    LinkedList list = new LinkedList();
    list.insert(5);
    list.insert(10);
    list.insert(15);
    list.insertAfter(15, 20);
    assertEquals(5, list.head.value);
    assertEquals(10, list.head.next.value);
    assertEquals(15, list.head.next.next.value);
    assertEquals(20, list.head.next.next.next.value);
  }
  @Test
  void testKthFromEndGreaterThanListLength() {
    LinkedList list = new LinkedList();
    list.insert(1);
    list.insert(3);
    list.insert(8);
    list.insert(2);

    assertThrows(IllegalArgumentException.class, () -> list.kthFromEnd(6));
  }

  @Test
  void testKthFromEndSameAsListLength() {
    LinkedList list = new LinkedList();
    list.insert(1);
    list.insert(3);
    list.insert(8);
    list.insert(2);

    assertThrows(IllegalArgumentException.class, () -> list.kthFromEnd(4));
  }

  @Test
  void testKthFromEndNotPositiveInteger() {
    LinkedList list = new LinkedList();
    list.insert(1);
    list.insert(3);
    list.insert(8);
    list.insert(2);

    assertThrows(IllegalArgumentException.class, () -> list.kthFromEnd(-1));
  }

  @Test
  void testKthFromEndLinkedListSize1() {
    LinkedList list = new LinkedList();
    list.insert(1);

    assertEquals(1, list.kthFromEnd(0));
  }

  @Test
  void testKthFromEndHappyPath() {
    LinkedList list = new LinkedList();
    list.insert(1);
    list.insert(3);
    list.insert(8);
    list.insert(2);

    assertEquals(2, list.kthFromEnd(0));
    assertEquals(8, list.kthFromEnd(1));
    assertEquals(3, list.kthFromEnd(2));
  }
  @Test
  void testZipLists() {
    // This test checks if the zipLists() function works correctly when both lists are not empty.

    // Create two linked lists with three nodes each.
    LinkedList list1 = new LinkedList();
    list1.insert(1);
    list1.insert(3);
    list1.insert(2);

    LinkedList list2 = new LinkedList();
    list2.insert(5);
    list2.insert(9);
    list2.insert(4);

    // Zip the two lists together.
    LinkedList zippedList = LinkedList.zipLists(list1, list2);

    // Check if the zipped list is correct.
    assertEquals("{ 1 } -> { 5 } -> { 3 } -> { 9 } -> { 2 } -> { 4 } -> NULL", zippedList.toString());
  }

  @Test
  void testZipListsWithDifferentLengths() {
    // This test checks if the zipLists() function works correctly when the two lists have different lengths.

    // Create two linked lists with three and four nodes, respectively.
    LinkedList list1 = new LinkedList();
    list1.insert(1);
    list1.insert(3);
    list1.insert(2);

    LinkedList list2 = new LinkedList();
    list2.insert(5);
    list2.insert(9);
    list2.insert(4);
    list2.insert(6);

    // Zip the two lists together.
    LinkedList zippedList = LinkedList.zipLists(list1, list2);

    // Check if the zipped list is correct.
    assertEquals("{ 1 } -> { 5 } -> { 3 } -> { 9 } -> { 2 } -> { 4 } -> { 6 } -> NULL", zippedList.toString());
  }

  @Test
  void testZipListsWithEmptyList() {
    // This test checks if the zipLists() function works correctly when one of the lists is empty.

    // Create two linked lists, one with three nodes and the other with zero nodes.
    LinkedList list1 = new LinkedList();
    list1.insert(1);
    list1.insert(3);
    list1.insert(2);

    LinkedList list2 = new LinkedList();

    // Zip the two lists together.
    LinkedList zippedList = LinkedList.zipLists(list1, list2);

    // Check if the zipped list is correct.
    assertEquals("{ 1 } -> { 3 } -> { 2 } -> NULL", zippedList.toString());
  }

  @Test
  void testZipListsWithTwoEmptyLists() {
    // This test checks if the zipLists() function works correctly when both lists are empty.

    // Create two empty linked lists.
    LinkedList list1 = new LinkedList();
    LinkedList list2 = new LinkedList();

    // Zip the two lists together.
    LinkedList zippedList = LinkedList.zipLists(list1, list2);

    // Check if the zipped list is correct.
    assertEquals("NULL", zippedList.toString());
  }


}
